{
  "scopeName": "source.lm",
  "name": "lm Language",
  "fileTypes": ["lm"],
  "uuid": "a1b2c3d4-1234-5678-90ab-cdef12345678",
  "patterns": [
    {
      "begin": "/\\*",
      "end": "\\*/",
      "name": "comment.block.lm",
      "patterns": [
        {
          "match": "\\bTODO\\b",
          "name": "comment.block.todo.lm"
        }
      ]
    },
    {
      "match": "//.*$",
      "name": "comment.line.double-slash.lm"
    },
    {
      "match": "\"(\\\\.|[^\\\\\"])*\"",
      "name": "string.quoted.double.lm"
    },
    {
      "match": "'(\\\\.|[^\\\\'])*'",
      "name": "string.quoted.single.lm"
    },
    {
      "match": "\\b(0x[0-9A-Fa-f]+|0b[01]+|\\d+(\\.\\d+)?(e[+-]?\\d+)?)\\b",
      "name": "constant.numeric.lm"
    },
    {
      "match": "\\b(if|else|for|while|do|break|continue|return|func|let|const|import|export|true|false|null)\\b",
      "name": "keyword.control.lm"
    },
    {
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(",
      "name": "entity.name.function.lm",
      "captures": {
        "0": {
          "patterns": [
            {
              "match": "\\(",
              "name": "punctuation.definition.function.begin.lm"
            }
          ]
        }
      }
    },
    {
      "match": "\\b(?!(if|else|for|while|do|break|continue|return|func|var|import|true|false|null)\\b)[a-zA-Z_][a-zA-Z0-9_]*\\b",
      "name": "variable.other.lm"
    },
    {
      "match": "\\+|-|\\*|/|%|==|!=|>|>=|<<|<=|&&|\\|\\||!|=|\\+\\+|--",
      "name": "keyword.operator.lm"
    },
    {
      "match": "\\(|\\)|\\{|\\}|\\[|\\]|,|;|:|\\.",
      "name": "punctuation.definition.lm"
    }
  ]
}